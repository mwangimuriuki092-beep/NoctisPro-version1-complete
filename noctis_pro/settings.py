"""
Django settings for noctis_pro project.

Generated by 'Django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
import os
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-7x!8k@m$z9h#4p&x3w2v6t@n5q8r7y#3e$6u9i%m&o^2d1f0g')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

# Internet and network configuration
DOMAIN_NAME = os.environ.get('DOMAIN_NAME', 'localhost')
USE_HTTPS = os.environ.get('USE_HTTPS', 'true').lower() == 'true'
INTERNET_ACCESS = os.environ.get('INTERNET_ACCESS', 'false').lower() == 'true'

# Tailscale configuration (optional)
TAILSCALE_HOSTNAME = os.environ.get('TAILNET_HOSTNAME', 'noctispro')
IS_TAILNET = os.environ.get('USE_TAILNET', 'false').lower() == 'true'

# Configure allowed hosts for internet access
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')

# Add internet domain hosts
ALLOWED_HOSTS.extend([
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
    DOMAIN_NAME,
    f'www.{DOMAIN_NAME}',
])

# Add Tailscale hosts if enabled
if IS_TAILNET:
    ALLOWED_HOSTS.extend([
        TAILSCALE_HOSTNAME,
        '*.ts.net',  # Tailscale MagicDNS
        '100.*',     # Tailscale IP range
    ])

# Remove duplicates and empty strings
ALLOWED_HOSTS = list(filter(lambda x: x and x.strip(), list(set(ALLOWED_HOSTS))))


# Application definition

INSTALLED_APPS = [
    'daphne',  # Re-enabled for ASGI support
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',  # Re-enabled for API access
    'channels',  # Re-enabled for WebSocket support
    
    # Custom apps - ENABLED FOR MEDICAL EMERGENCY
    'accounts',
    'worklist',  # ENABLED - CRITICAL FOR PATIENT DATA ACCESS
    'dicom_viewer',  # ENABLED - CRITICAL FOR MEDICAL IMAGING
    'reports',  # ENABLED - CRITICAL FOR MEDICAL REPORTS
    'admin_panel',  # ENABLED - CRITICAL FOR SYSTEM MANAGEMENT
    'chat',  # ENABLED - CRITICAL FOR MEDICAL COMMUNICATION
    'notifications',  # ENABLED - CRITICAL FOR MEDICAL ALERTS
    'ai_analysis',  # ENABLED - CRITICAL FOR MEDICAL AI
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Re-enabled
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'noctis_pro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'noctis_pro.wsgi.application'
ASGI_APPLICATION = 'noctis_pro.asgi.application'  # Re-enabled for Daphne

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Redis configuration for channels - Disabled for now to fix login
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)],
#         },
#     },
# }

# Use in-memory channel layer for now
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

# Celery Configuration - Disabled for now to fix login
# CELERY_BROKER_URL = 'redis://localhost:6379'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379'
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = os.environ.get('STATIC_URL', '/static/')
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
_extra_static_dir = os.path.join(BASE_DIR, 'static')
os.makedirs(_extra_static_dir, exist_ok=True)
STATICFILES_DIRS = [_extra_static_dir]

SERVE_MEDIA_FILES = os.environ.get('SERVE_MEDIA_FILES', 'True').lower() == 'true'

# Configure MIME types for static files
import mimetypes
mimetypes.add_type('application/javascript', '.js')
mimetypes.add_type('text/css', '.css')
mimetypes.add_type('application/json', '.json')

# Media files (uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# DICOM files storage
DICOM_ROOT = os.path.join(MEDIA_ROOT, 'dicom')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# CORS settings for internet access
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "https://localhost:8000",
    "https://127.0.0.1:8000",
]

# Add internet domain CORS origins
if DOMAIN_NAME != 'localhost':
    CORS_ALLOWED_ORIGINS.extend([
        f"https://{DOMAIN_NAME}",
        f"https://www.{DOMAIN_NAME}",
        f"http://{DOMAIN_NAME}",
        f"http://www.{DOMAIN_NAME}",
    ])

# Add Tailnet CORS configuration if enabled
if IS_TAILNET:
    CORS_ALLOWED_ORIGINS.extend([
        f"http://{TAILSCALE_HOSTNAME}:8080",
        f"http://{TAILSCALE_HOSTNAME}",
        "http://100.*:8080",  # Tailscale IP range
        "http://100.*",       # All Tailscale IPs
        "http://*.ts.net",    # Tailscale MagicDNS
        "https://*.ts.net",   # Tailscale MagicDNS HTTPS
    ])

# Enable CORS for development or controlled access
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only allow all origins in debug mode
CORS_ALLOW_CREDENTIALS = True

# CSRF trusted origins for internet access
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://localhost:80",
    "http://127.0.0.1:80",
    "http://localhost",
    "http://127.0.0.1",
    "https://localhost:8000",
    "https://127.0.0.1:8000",
]

# Add internet domain CSRF trusted origins
if DOMAIN_NAME != 'localhost':
    CSRF_TRUSTED_ORIGINS.extend([
        f"https://{DOMAIN_NAME}",
        f"https://www.{DOMAIN_NAME}",
        f"http://{DOMAIN_NAME}",
        f"http://www.{DOMAIN_NAME}",
    ])

# Add Tailscale CSRF trusted origins if enabled
if IS_TAILNET:
    CSRF_TRUSTED_ORIGINS.extend([
        f"http://{TAILSCALE_HOSTNAME}",
        f"http://{TAILSCALE_HOSTNAME}:8080",
        f"https://{TAILSCALE_HOSTNAME}",
        f"https://{TAILSCALE_HOSTNAME}:8080",
        "http://*.ts.net",    # Tailscale MagicDNS
        "https://*.ts.net",   # Tailscale MagicDNS HTTPS
        "http://100.*",       # Tailscale IP range
        "https://100.*",      # Tailscale IP range HTTPS
    ])

# Tailnet configuration complete - no additional URLs needed

# Custom user model
AUTH_USER_MODEL = 'accounts.User'

# Login URLs
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/worklist/'  # Redirect to worklist after successful login
LOGOUT_REDIRECT_URL = '/login/'

# Session configuration - Use database sessions instead of Redis
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
# 30 minutes inactivity timeout
SESSION_COOKIE_AGE = 1800
# Refresh expiry on each request to implement inactivity-based expiry
SESSION_SAVE_EVERY_REQUEST = True
# Expire session at browser close to require fresh login on new window
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# File upload settings - Enhanced for up to 5000 DICOM images
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024 * 1024  # 5GB for large DICOM batches
DATA_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024 * 1024  # 5GB for large DICOM batches
DATA_UPLOAD_MAX_NUMBER_FIELDS = 15000  # Support for up to 5000 images with metadata

# Security settings for internet access
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'SAMEORIGIN' if DEBUG else 'DENY'

# Internet security settings
if INTERNET_ACCESS and USE_HTTPS and not DEBUG:
    # Production security for internet access
    SECURE_SSL_REDIRECT = True  # Redirect HTTP to HTTPS
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True  # HTTPS required for cookies
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Strict'  # Strict for internet security
    CSRF_COOKIE_SAMESITE = 'Strict'
    
    # Additional security headers
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    SECURE_CONTENT_SECURITY_POLICY = {
        'default-src': ["'self'"],
        'script-src': ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
        'style-src': ["'self'", "'unsafe-inline'"],
        'img-src': ["'self'", "data:", "https:"],
        'font-src': ["'self'", "data:"],
        'connect-src': ["'self'"],
        'frame-ancestors': ["'none'"],
    }
elif IS_TAILNET and not DEBUG:
    # Tailnet provides secure transport, adjust for HTTP over private network
    SECURE_SSL_REDIRECT = False  # No SSL required on Tailnet (encrypted by default)
    SESSION_COOKIE_SECURE = False  # HTTP is secure over Tailnet
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_SAMESITE = 'Lax'

# Legacy production security settings (kept for compatibility)
if not DEBUG and not IS_TAILNET and not INTERNET_ACCESS:
    SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False').lower() == 'true'
    SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '31536000'))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True

# Database
# Production database configuration with fallback to SQLite
DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': os.environ.get('DB_NAME', BASE_DIR / 'db.sqlite3'),
        'USER': os.environ.get('DB_USER', ''),
        'PASSWORD': os.environ.get('DB_PASSWORD', ''),
        'HOST': os.environ.get('DB_HOST', ''),
        'PORT': os.environ.get('DB_PORT', ''),
    }
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'noctis_pro.log'),
            'maxBytes': 10*1024*1024,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'security': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'security.log'),
            'maxBytes': 5*1024*1024,  # 5MB
            'backupCount': 3,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'] if DEBUG else ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security'],
            'level': 'WARNING',
            'propagate': False,
        },
        'noctis_pro': {
            'handlers': ['file', 'console'] if DEBUG else ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'noctis_pro.upload': {
            'handlers': ['file', 'console'] if DEBUG else ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'worklist': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Performance settings for production
if not DEBUG:
    # Database connection pooling
    DATABASES['default']['CONN_MAX_AGE'] = 60
    
    # Cache static file serving
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Network-specific settings optimization
if IS_TAILNET or INTERNET_ACCESS:
    # Optimize for network usage
    USE_TZ = True
    
print(f"🚀 Noctis Pro PACS Settings Loaded:")
print(f"   • Debug Mode: {DEBUG}")
print(f"   • Internet Access: {INTERNET_ACCESS}")
print(f"   • HTTPS Enabled: {USE_HTTPS}")
print(f"   • Domain Name: {DOMAIN_NAME}")
print(f"   • Tailnet Mode: {IS_TAILNET}")
if IS_TAILNET:
    print(f"   • Tailnet Hostname: {TAILSCALE_HOSTNAME}")
print(f"   • Allowed Hosts: {len(ALLOWED_HOSTS)} configured")
print(f"   • Database: {DATABASES['default']['ENGINE'].split('.')[-1]}")
print(f"   • Security: {'Development' if DEBUG else 'Production'} profile")
if INTERNET_ACCESS:
    print(f"   • Network Mode: Internet Access via HTTPS")
elif IS_TAILNET:
    print(f"   • Network Mode: Private Tailnet")
else:
    print(f"   • Network Mode: Local/Private")


# Tailnet proxy configuration
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# DICOM viewer masterpiece settings
DICOM_VIEWER_SETTINGS = {
    'MAX_UPLOAD_SIZE': 100 * 1024 * 1024,  # 100MB
    'SUPPORTED_MODALITIES': ['CT', 'MR', 'CR', 'DX', 'US', 'XA'],
    'CACHE_TIMEOUT': 3600,
    'ENABLE_3D_RECONSTRUCTION': True,
    'ENABLE_MEASUREMENTS': True,
    'ENABLE_ANNOTATIONS': True,
    'ENABLE_AI_ANALYSIS': True,
    'ENABLE_QR_CODES': True,
    'ENABLE_LETTERHEADS': True,
}
