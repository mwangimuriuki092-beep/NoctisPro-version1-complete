version: '3.8'

# Docker Compose configuration with Django, FastAPI, and Rust
services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: noctispro
      POSTGRES_USER: noctispro
      POSTGRES_PASSWORD: ${DB_PASSWORD:-noctispro_secure_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U noctispro"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Web Application
  django:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn noctis_pro.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 120"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://noctispro:${DB_PASSWORD:-noctispro_secure_pass}@db:5432/noctispro
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=noctis_pro.settings
      - DEBUG=False
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI High-Performance API
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn fastapi_app.main:app --host 0.0.0.0 --port 8001 --workers 4
    volumes:
      - .:/app
      - media_volume:/app/media
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://noctispro:${DB_PASSWORD:-noctispro_secure_pass}@db:5432/noctispro
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=noctis_pro.settings
      - ENVIRONMENT=production
      - MEDIA_ROOT=/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rust DICOM SCP Server
  rust_scp:
    build:
      context: ./dicom_scp_server
      dockerfile: Dockerfile
    ports:
      - "11112:11112"
    environment:
      - DATABASE_URL=postgresql://noctispro:${DB_PASSWORD:-noctispro_secure_pass}@db:5432/noctispro
      - STORAGE_PATH=/app/dicom_storage
      - RUST_LOG=info,dicom_scp_server=debug
    volumes:
      - media_volume:/app/dicom_storage
    depends_on:
      db:
        condition: service_healthy

  # Celery Worker (for background tasks)
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A noctis_pro worker -l info
    volumes:
      - .:/app
      - media_volume:/app/media
    environment:
      - DATABASE_URL=postgresql://noctispro:${DB_PASSWORD:-noctispro_secure_pass}@db:5432/noctispro
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=noctis_pro.settings
    depends_on:
      - db
      - redis

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - django
      - fastapi
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
