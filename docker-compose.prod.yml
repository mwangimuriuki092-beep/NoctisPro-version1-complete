version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: noctispro_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-noctis_pro}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - noctispro_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  redis:
    image: redis:7-alpine
    container_name: noctispro_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultredispass}
    volumes:
      - redis_data_prod:/data
    networks:
      - noctispro_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  dicom_scp:
    build:
      context: ./dicom_scp_server
      dockerfile: Dockerfile
    container_name: noctispro_dicom_scp_prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-noctis_pro}
      DICOM_STORAGE_PATH: /app/media/dicom_files
      RUST_LOG: info
    volumes:
      - media_data_prod:/app/media
      - ./dicom_scp_server/config.prod.json:/app/config.json:ro
    ports:
      - "11112:11112"
    networks:
      - noctispro_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  django:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: noctispro_django_prod
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        gunicorn noctis_pro.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120 --access-logfile - --error-logfile -
      "
    environment:
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY:?SECRET_KEY must be set}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-noctis_pro}
      REDIS_URL: redis://:${REDIS_PASSWORD:-defaultredispass}@redis:6379/0
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost}
      DICOM_SCP_HOST: dicom_scp
      DICOM_SCP_PORT: 11112
      DICOM_SCP_AE_TITLE: RUST_SCP
      DICOM_SCU_AE_TITLE: DJANGO_SCU
      DEPLOYMENT_MODE: ${DEPLOYMENT_MODE:-production}
      USE_HTTPS: ${USE_HTTPS:-false}
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
    volumes:
      - media_data_prod:/app/media
      - static_data_prod:/app/staticfiles
      - ./logs:/app/logs
    expose:
      - "8000"
    networks:
      - noctispro_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      dicom_scp:
        condition: service_started
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G

  nginx:
    image: nginx:alpine
    container_name: noctispro_nginx_prod
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - static_data_prod:/app/staticfiles:ro
      - media_data_prod:/app/media:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - noctispro_network
    depends_on:
      - django
    restart: always

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: noctispro_celery_prod
    command: celery -A noctis_pro worker -l info --concurrency=4
    environment:
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-noctis_pro}
      REDIS_URL: redis://:${REDIS_PASSWORD:-defaultredispass}@redis:6379/0
      DICOM_SCP_HOST: dicom_scp
      DICOM_SCP_PORT: 11112
    volumes:
      - media_data_prod:/app/media
      - ./logs:/app/logs
    networks:
      - noctispro_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: noctispro_celery_beat_prod
    command: celery -A noctis_pro beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-noctis_pro}
      REDIS_URL: redis://:${REDIS_PASSWORD:-defaultredispass}@redis:6379/0
    volumes:
      - ./logs:/app/logs
    networks:
      - noctispro_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

volumes:
  postgres_data_prod:
  redis_data_prod:
  media_data_prod:
  static_data_prod:

networks:
  noctispro_network:
    driver: bridge