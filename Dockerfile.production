# Production Dockerfile for NoctisPro PACS
# Multi-stage build for optimized production deployment
FROM python:3.11-slim as builder

# Install system dependencies for medical imaging
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    libjpeg-dev \
    libpng-dev \
    libfreetype6-dev \
    liblcms2-dev \
    libwebp-dev \
    libharfbuzz-dev \
    libfribidi-dev \
    libxcb1-dev \
    pkg-config \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt /tmp/
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# Production stage
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    libjpeg62-turbo \
    libpng16-16 \
    libfreetype6 \
    liblcms2-2 \
    libwebp7 \
    libharfbuzz0b \
    libfribidi0 \
    libxcb1 \
    postgresql-client \
    nginx \
    supervisor \
    cron \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create application user for security
RUN groupadd -r noctispro && useradd -r -g noctispro noctispro

# Create application directories
RUN mkdir -p /app /app/staticfiles /app/media /app/logs /app/backups \
    && chown -R noctispro:noctispro /app

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=noctispro:noctispro . .

# Create production environment file
RUN echo "DJANGO_SETTINGS_MODULE=noctis_pro.settings" > .env && \
    echo "DEBUG=False" >> .env && \
    echo "USE_HTTPS=True" >> .env && \
    echo "DATABASE_URL=postgresql://noctispro:noctispro@db:5432/noctispro" >> .env && \
    echo "REDIS_URL=redis://redis:6379/0" >> .env

# Collect static files
RUN python manage.py collectstatic --noinput

# Create Nginx configuration
RUN mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled
COPY docker/nginx.conf /etc/nginx/sites-available/noctispro
RUN ln -s /etc/nginx/sites-available/noctispro /etc/nginx/sites-enabled/ && \
    rm -f /etc/nginx/sites-enabled/default

# Create Supervisor configuration
COPY docker/supervisord.conf /etc/supervisor/conf.d/noctispro.conf

# Create backup cron job
RUN echo "0 2 * * * /opt/venv/bin/python /app/manage.py create_medical_backup --type daily" > /etc/cron.d/noctispro-backup && \
    echo "0 1 * * 0 /opt/venv/bin/python /app/manage.py create_medical_backup --type weekly" >> /etc/cron.d/noctispro-backup && \
    echo "0 0 1 * * /opt/venv/bin/python /app/manage.py create_medical_backup --type monthly" >> /etc/cron.d/noctispro-backup && \
    chmod 0644 /etc/cron.d/noctispro-backup

# Create startup script
COPY docker/startup.sh /app/startup.sh
RUN chmod +x /app/startup.sh

# Set proper permissions
RUN chown -R noctispro:noctispro /app

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/health/ || exit 1

# Expose ports
EXPOSE 80 443

# Use startup script
CMD ["/app/startup.sh"]