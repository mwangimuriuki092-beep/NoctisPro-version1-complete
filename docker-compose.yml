
services:
  # Tailscale sidecar (optional - can be disabled for internet-only access)
  tailscale:
    image: tailscale/tailscale:latest
    container_name: noctis_tailscale
    hostname: ${TAILNET_HOSTNAME:-noctispro}
    environment:
      - TS_AUTHKEY=${TAILSCALE_AUTH_KEY}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
      - TS_ACCEPT_DNS=true
    volumes:
      - tailscale_data:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv6.conf.all.forwarding=1
    restart: unless-stopped
    network_mode: host
    profiles:
      - tailscale  # Optional profile for Tailscale

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: noctis_db
    environment:
      POSTGRES_DB: noctis_pro
      POSTGRES_USER: noctis_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-noctis_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"  # Internal access only for security
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U noctis_user -d noctis_pro"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - noctis_internal

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    container_name: noctis_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Internal access only for security
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_secure_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - noctis_internal

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: noctis_web
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DJANGO_SETTINGS_MODULE=noctis_pro.settings
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=noctis_pro
      - DB_USER=noctis_user
      - DB_PASSWORD=${POSTGRES_PASSWORD:-noctis_secure_password}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
      - USE_HTTPS=${USE_HTTPS:-true}
      - INTERNET_ACCESS=true
      - ALLOWED_HOSTS=${DOMAIN_NAME:-localhost},www.${DOMAIN_NAME:-localhost},localhost,127.0.0.1
    volumes:
      - .:/app
      - media_files:/app/media
      - static_files:/app/staticfiles
    expose:
      - "8080"
    networks:
      - noctis_internal
      - noctis_public
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             python manage.py setup_working_ai_models &&
             python manage.py shell -c \"from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='admin').delete(); User.objects.create_superuser('admin', 'admin@noctispro.com', 'admin123'); print('âœ… Admin user created')\" &&
             gunicorn noctis_pro.wsgi:application --bind 0.0.0.0:8080 --workers 4 --timeout 120"

  # AI Analysis Processor
  ai_processor:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: noctis_ai_processor
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DJANGO_SETTINGS_MODULE=noctis_pro.settings
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=noctis_pro
      - DB_USER=noctis_user
      - DB_PASSWORD=${POSTGRES_PASSWORD:-noctis_secure_password}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
      - INTERNET_ACCESS=true
    volumes:
      - .:/app
      - media_files:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - noctis_internal
    command: python manage.py process_ai_analyses --continuous

  # DICOM Receiver Service
  dicom_receiver:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: noctis_dicom
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DJANGO_SETTINGS_MODULE=noctis_pro.settings
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=noctis_pro
      - DB_USER=noctis_user
      - DB_PASSWORD=${POSTGRES_PASSWORD:-noctis_secure_password}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
      - INTERNET_ACCESS=true
    volumes:
      - .:/app
      - media_files:/app/media
    ports:
      - "11112:11112"  # Public DICOM port for internet access
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - noctis_internal
      - noctis_public
    command: python dicom_receiver.py --port 11112 --aet NOCTIS_SCP

  # Nginx for HTTPS internet access
  nginx:
    image: nginx:alpine
    container_name: noctis_nginx
    ports:
      - "80:80"    # HTTP port for Let's Encrypt challenges and redirect
      - "443:443"  # HTTPS port for secure internet access
    volumes:
      - ./deployment/nginx/sites-available/noctis-internet.conf:/etc/nginx/conf.d/default.conf:ro
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_files:/var/www/static:ro
      - media_files:/var/www/media:ro
      - letsencrypt_certs:/etc/letsencrypt:ro
      - letsencrypt_www:/var/www/certbot:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - noctis_public
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: noctis_certbot
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - letsencrypt_www:/var/www/certbot
    depends_on:
      - nginx
    profiles:
      - ssl
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${ADMIN_EMAIL:-admin@${DOMAIN_NAME:-localhost}} --agree-tos --no-eff-email -d ${DOMAIN_NAME:-localhost} -d www.${DOMAIN_NAME:-localhost}

networks:
  noctis_internal:
    driver: bridge
    internal: true
  noctis_public:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
  tailscale_data:
    driver: local
  letsencrypt_certs:
    driver: local
  letsencrypt_www:
    driver: local