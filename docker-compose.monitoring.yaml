# ============================================================================
# NoctisPro PACS - Monitoring Stack Override
# ============================================================================
# This file provides a standalone monitoring stack that can be used
# alongside the main docker-compose.prod.yaml
#
# Usage:
#   docker compose -f docker-compose.prod.yaml -f docker-compose.monitoring.yaml up -d
#

version: '3.8'

services:
  # ============================================================================
  # Metrics Collection
  # ============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: noctispro_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./deployment/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - noctispro_backend
      - noctispro_monitoring
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Visualization
  # ============================================================================

  grafana:
    image: grafana/grafana:latest
    container_name: noctispro_grafana
    environment:
      # Admin Credentials
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:?GRAFANA_ADMIN_PASSWORD must be set}
      
      # Server Settings
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3000}
      GF_SERVER_SERVE_FROM_SUB_PATH: "false"
      
      # Security
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_USERS_ALLOW_ORG_CREATE: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      
      # SMTP (optional)
      GF_SMTP_ENABLED: ${GRAFANA_SMTP_ENABLED:-false}
      GF_SMTP_HOST: ${GRAFANA_SMTP_HOST:-}
      GF_SMTP_USER: ${GRAFANA_SMTP_USER:-}
      GF_SMTP_PASSWORD: ${GRAFANA_SMTP_PASSWORD:-}
      GF_SMTP_FROM_ADDRESS: ${GRAFANA_SMTP_FROM:-grafana@noctispro.local}
      
      # Plugins
      GF_INSTALL_PLUGINS: ${GRAFANA_PLUGINS:-}
      
      # Performance
      GF_DATABASE_WAL: "true"
      GF_LOG_LEVEL: ${GRAFANA_LOG_LEVEL:-info}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./deployment/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - noctispro_monitoring
    depends_on:
      - prometheus
    restart: always
    user: "472"  # Grafana user
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # System Metrics Exporter
  # ============================================================================

  node_exporter:
    image: prom/node-exporter:latest
    container_name: noctispro_node_exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.netdev.device-exclude=^(veth.*|br-.*|docker.*|lo)$$'
      - '--collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$$'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "127.0.0.1:9100:9100"
    networks:
      - noctispro_monitoring
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # ============================================================================
  # PostgreSQL Metrics Exporter
  # ============================================================================

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: noctispro_postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-noctis_pro}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
      PG_EXPORTER_CONSTANT_LABELS: "environment=production,service=noctispro"
    volumes:
      - ./deployment/prometheus/postgres_queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - "127.0.0.1:9187:9187"
    networks:
      - noctispro_backend
      - noctispro_monitoring
    depends_on:
      - postgres
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # ============================================================================
  # Redis Metrics Exporter
  # ============================================================================

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: noctispro_redis_exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      REDIS_EXPORTER_CHECK_KEYS: "celery:*,django:*"
      REDIS_EXPORTER_LOG_FORMAT: "json"
    ports:
      - "127.0.0.1:9121:9121"
    networks:
      - noctispro_backend
      - noctispro_monitoring
    depends_on:
      - redis
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # ============================================================================
  # Nginx Metrics Exporter
  # ============================================================================

  nginx_exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: noctispro_nginx_exporter
    command:
      - '--nginx.scrape-uri=http://nginx:80/nginx_status'
    ports:
      - "127.0.0.1:9113:9113"
    networks:
      - noctispro_frontend
      - noctispro_monitoring
    depends_on:
      - nginx
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # ============================================================================
  # Alert Manager (Optional)
  # ============================================================================

  alertmanager:
    image: prom/alertmanager:latest
    container_name: noctispro_alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./deployment/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "127.0.0.1:9093:9093"
    networks:
      - noctispro_monitoring
    restart: always
    profiles:
      - alerting
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # ============================================================================
  # Log Aggregation (Optional)
  # ============================================================================

  loki:
    image: grafana/loki:latest
    container_name: noctispro_loki
    command: -config.file=/etc/loki/loki.yml
    volumes:
      - ./deployment/loki/loki.yml:/etc/loki/loki.yml:ro
      - loki_data:/loki
    ports:
      - "127.0.0.1:3100:3100"
    networks:
      - noctispro_monitoring
    restart: always
    profiles:
      - logging
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  promtail:
    image: grafana/promtail:latest
    container_name: noctispro_promtail
    command: -config.file=/etc/promtail/promtail.yml
    volumes:
      - ./deployment/loki/promtail.yml:/etc/promtail/promtail.yml:ro
      - ./logs:/var/log/noctispro:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - noctispro_monitoring
    depends_on:
      - loki
    restart: always
    profiles:
      - logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

# ============================================================================
# Networks (extends networks from main compose file)
# ============================================================================

networks:
  noctispro_backend:
    external: true
  noctispro_frontend:
    external: true
  noctispro_monitoring:
    external: true

# ============================================================================
# Volumes
# ============================================================================

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local
