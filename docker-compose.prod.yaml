version: '3.8'

# Production-Ready Docker Compose Configuration for NoctisPro PACS
# This configuration includes all necessary services for a production deployment
# with monitoring, backups, and security best practices.

services:
  # ============================================================================
  # Database Services
  # ============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: noctispro_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-noctis_pro}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./deployment/postgres/postgresql.conf.production:/etc/postgresql/postgresql.conf:ro
      - ./deployment/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups/postgres:/backups
    ports:
      - "127.0.0.1:5432:5432"  # Only accessible from localhost
    networks:
      - noctispro_backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-noctis_pro}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: noctispro_redis_prod
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-changeme}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data_prod:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"  # Only accessible from localhost
    networks:
      - noctispro_backend
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-changeme}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2.5G
        reservations:
          cpus: '1'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # DICOM Service
  # ============================================================================

  dicom_scp:
    build:
      context: ./dicom_scp_server
      dockerfile: Dockerfile
    container_name: noctispro_dicom_scp_prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-noctis_pro}
      DICOM_STORAGE_PATH: /app/media/dicom_files
      RUST_LOG: ${RUST_LOG:-info}
      DICOM_PORT: ${DICOM_PORT:-11112}
      AE_TITLE: ${DICOM_AE_TITLE:-NOCTISPRO_SCP}
    volumes:
      - media_data_prod:/app/media
      - ./dicom_scp_server/config.prod.json:/app/config.json:ro
      - ./logs/dicom:/app/logs
    ports:
      - "${DICOM_PORT:-11112}:11112"
    networks:
      - noctispro_backend
      - noctispro_frontend
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Application Services
  # ============================================================================

  django:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE:-2024-01-01}
        VCS_REF: ${VCS_REF:-unknown}
    container_name: noctispro_django_prod
    command: >
      sh -c "
        echo 'Running database migrations...' &&
        python manage.py migrate --noinput &&
        echo 'Collecting static files...' &&
        python manage.py collectstatic --noinput --clear &&
        echo 'Creating cache tables...' &&
        python manage.py createcachetable || true &&
        echo 'Starting Gunicorn server...' &&
        gunicorn noctis_pro.wsgi:application 
          --bind 0.0.0.0:8000 
          --workers ${GUNICORN_WORKERS:-4} 
          --threads ${GUNICORN_THREADS:-4}
          --worker-class gthread
          --worker-tmp-dir /dev/shm
          --timeout 120 
          --graceful-timeout 30
          --keep-alive 5
          --max-requests 1000
          --max-requests-jitter 50
          --access-logfile /app/logs/gunicorn-access.log
          --error-logfile /app/logs/gunicorn-error.log
          --log-level ${LOG_LEVEL:-info}
          --capture-output
          --enable-stdio-inheritance
      "
    environment:
      # Django Core
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY:?SECRET_KEY must be set}
      DJANGO_SETTINGS_MODULE: noctis_pro.settings
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-noctis_pro}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/1
      
      # DICOM Configuration
      DICOM_SCP_HOST: dicom_scp
      DICOM_SCP_PORT: ${DICOM_PORT:-11112}
      DICOM_SCP_AE_TITLE: ${DICOM_AE_TITLE:-NOCTISPRO_SCP}
      DICOM_SCU_AE_TITLE: ${DICOM_SCU_AE_TITLE:-NOCTISPRO_SCU}
      
      # Application Settings
      DEPLOYMENT_MODE: production
      USE_HTTPS: ${USE_HTTPS:-true}
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
      SECURE_SSL_REDIRECT: ${SECURE_SSL_REDIRECT:-true}
      SESSION_COOKIE_SECURE: "true"
      CSRF_COOKIE_SECURE: "true"
      
      # Performance
      CONN_MAX_AGE: "600"
      
      # Backup
      BACKUP_ROOT: /app/backups
      
      # Monitoring
      ENABLE_METRICS: "true"
    volumes:
      - media_data_prod:/app/media
      - static_data_prod:/app/staticfiles
      - backup_data_prod:/app/backups
      - ./logs:/app/logs
    expose:
      - "8000"
    networks:
      - noctispro_backend
      - noctispro_frontend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      dicom_scp:
        condition: service_started
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ============================================================================
  # Background Workers
  # ============================================================================

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: noctispro_celery_worker_prod
    command: >
      celery -A noctis_pro worker 
        --loglevel=${CELERY_LOG_LEVEL:-info}
        --concurrency=${CELERY_CONCURRENCY:-4}
        --max-tasks-per-child=1000
        --time-limit=3600
        --soft-time-limit=3300
    environment:
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-noctis_pro}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/1
      DICOM_SCP_HOST: dicom_scp
      DICOM_SCP_PORT: ${DICOM_PORT:-11112}
      C_FORCE_ROOT: "true"
    volumes:
      - media_data_prod:/app/media
      - ./logs/celery:/app/logs
    networks:
      - noctispro_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      django:
        condition: service_started
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: noctispro_celery_beat_prod
    command: >
      celery -A noctis_pro beat 
        --loglevel=${CELERY_LOG_LEVEL:-info}
        --scheduler django_celery_beat.schedulers:DatabaseScheduler
        --pidfile=/tmp/celerybeat.pid
    environment:
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-noctis_pro}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/1
    volumes:
      - ./logs/celery:/app/logs
    networks:
      - noctispro_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      django:
        condition: service_started
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # AI Processing Worker (dedicated for AI tasks)
  ai_worker:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: noctispro_ai_worker_prod
    command: python manage.py process_ai_analyses --continuous
    environment:
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-noctis_pro}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      AI_PROCESSING_ENABLED: "true"
    volumes:
      - media_data_prod:/app/media
      - ./logs/ai:/app/logs
    networks:
      - noctispro_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      django:
        condition: service_started
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Web Server (Nginx)
  # ============================================================================

  nginx:
    image: nginx:alpine
    container_name: noctispro_nginx_prod
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/sites-available/noctis.conf:/etc/nginx/conf.d/default.conf:ro
      - static_data_prod:/app/staticfiles:ro
      - media_data_prod:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      # For Let's Encrypt
      - letsencrypt_certs:/etc/letsencrypt:ro
      - letsencrypt_www:/var/www/certbot:ro
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    networks:
      - noctispro_frontend
    depends_on:
      django:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ============================================================================
  # SSL Certificate Management (Optional)
  # ============================================================================

  certbot:
    image: certbot/certbot:latest
    container_name: noctispro_certbot
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - letsencrypt_www:/var/www/certbot
    depends_on:
      - nginx
    profiles:
      - ssl
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # ============================================================================
  # Monitoring Stack (Optional - activate with --profile monitoring)
  # ============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: noctispro_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - noctispro_backend
      - noctispro_monitoring
    restart: always
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:latest
    container_name: noctispro_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:?GRAFANA_ADMIN_PASSWORD must be set}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3000}
      GF_INSTALL_PLUGINS: ${GRAFANA_PLUGINS:-}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - noctispro_monitoring
    depends_on:
      - prometheus
    restart: always
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  node_exporter:
    image: prom/node-exporter:latest
    container_name: noctispro_node_exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "127.0.0.1:9100:9100"
    networks:
      - noctispro_monitoring
    restart: always
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: noctispro_postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-noctis_pro}?sslmode=disable"
    ports:
      - "127.0.0.1:9187:9187"
    networks:
      - noctispro_backend
      - noctispro_monitoring
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: noctispro_redis_exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
    ports:
      - "127.0.0.1:9121:9121"
    networks:
      - noctispro_backend
      - noctispro_monitoring
    depends_on:
      redis:
        condition: service_healthy
    restart: always
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # ============================================================================
  # Backup Service
  # ============================================================================

  backup:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: noctispro_backup_prod
    command: python manage.py start_backup_scheduler
    environment:
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-noctis_pro}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      BACKUP_ROOT: /app/backups
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - media_data_prod:/app/media:ro
      - backup_data_prod:/app/backups
      - ./logs/backup:/app/logs
    networks:
      - noctispro_backend
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    profiles:
      - backup
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ============================================================================
# Networks
# ============================================================================

networks:
  noctispro_frontend:
    driver: bridge
    name: noctispro_frontend
  
  noctispro_backend:
    driver: bridge
    internal: true
    name: noctispro_backend
  
  noctispro_monitoring:
    driver: bridge
    internal: true
    name: noctispro_monitoring

# ============================================================================
# Volumes
# ============================================================================

volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  
  media_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/media
  
  static_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/static
  
  backup_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_DIR:-./backups}
  
  letsencrypt_certs:
    driver: local
  
  letsencrypt_www:
    driver: local
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
